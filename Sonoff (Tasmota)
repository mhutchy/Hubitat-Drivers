/**
 *  Sonoff Tasmota
 *
 *  Copyright 2019 Mark Hutchings
 *
 * 	V1		Ported from smarthings
 *	V1.1	added option to switch off debugging
 *	V1.2	Corrected min and max temp bug	
 *  V1.3	Added "don't update max and min when off" option
 *  V2.0    Disable driver option added
 *  V3.0    Major revision: 
 *            MQTT protocol added
 *            Sonoff Basic, 2R, 4CH, TH and POW all combined into same driver
 *            General tidy-up
 *  V3.1    Removed conditional capabilities as not taking preferences into account
 *          Only sendEvent if raw data from tasmota device is different to hubitat device data
 *          Corrected bugs in temperature handler
 *          Added error handling if MQTT parse does not confirm change of switch state in a timley manner
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (
        name: "Tasmota (sonoff)", 
        namespace: "mhutchy", 
        author: "Mark Hutchings", 
        importUrl:"https://github.com/mhutchy/Hubitat-Drivers/blob/master/Sonoff%20(Tasmota)") {
        
		capability "Switch"
		capability "Temperature Measurement"
        capability "Voltage Measurement"
        capability "Energy Meter"
        capability "Refresh"
        capability "Sensor"
        
        attribute "Version" , "string"
        attribute "Mac" , "string"        
        attribute "maxTempToday", "number"
        attribute "minTempToday", "number"
        attribute "maxTempYesterday", "number"
        attribute "minTempYesterday", "number"
        attribute "readingDate", "string"
        attribute "failure", "bool"
        attribute "ipAddress", "string"
        attribute "lastEventTime", "long"
		
		command "enableDebugLogging"
		command "resetMaxMix"
        command "initialise"
        command "push"
        command "MQTT_Initialise"

	}

    
 
 preferences {
     
	 input "disabled", "bool", title: "Disable driver", description: "If this is set, the driver will neither update switch statuses or send commands to the device (used to avoid errors if device is disconnected)", displayDuringSetup: true, required: false
     input "password", "string", title: "Password (if used)", multiple: false, required: false
     input "forceIP", "string", title: "IP Address (optional)", description: "If left blank then device network iD will be used as IP", multiple: false, required: false
     input(name: "updateFrequency", type: "enum", title: "How often to request new data (not needed if using MQTT as data is updated live)", description: "Update frequency", options:["0","1m","5m","10m","30m","1h","3h"], displayDuringSetup: true, required: true, defaultValue: false)
    
     input(name: "multiSwitch", type: "bool", title: "Device has more than one switch?", defaultValue: false)      
     input(name: "switchNumber", type: "enum", title: "Switch number", description: "If sonoff has multilpe switches, specify the switch to be used", options:["1","2","3","4"], displayDuringSetup: true, required: true, defaultValue: 1)
    
                
    input(name: "sonoffTH", type: "bool", title: "Temperature and/or humidity measurement?", defaultValue: false)
    input(name: "sonoffPOW", type: "bool", title: "Power measurement?", defaultValue: false)
   
    
    input(name: "TOffset", type: "number", title: "Temperature offset", description: "Add an offset in to the measured temperature", defaultValue: 0, displayDuringSetup: true, required: false)
    
    input "useMQTT", "bool", title: "Use MQTT?", description: "Use MQTT instead of web server to communicate with device", displayDuringSetup: true, required: false
    input "mqttServer", "string", title: "MQTT Server URL", displayDuringSetup:true    
    
    input "logDebugging", "bool", title: "Enable debug logging", displayDuringSetup: true, required: true, defaultValue: true
	input "debugDelay", "bool", title: "Disable debug logging after 30m", displayDuringSetup: true, defaultValue: true, required: true
	input "infoLog", "bool", title: "Enable info logging", displayDuringSetup: true, required: true, defaultValue: true
    
    

		}
}

// parse events into attributes

  //  Sonoff doesn't send any data so parse does not work

// handle commands



def installed(){
	logDebug ("$device.displayName installed ${settings}")
    initialise()
}

def updated(){
	logDebug ("$device.displayName updated ${settings}")
    initialise()
}

def initialise(){
	log.debug "$device.displayName initialising ${settings}"
    state.clear()
    unschedule()
    
 	if (logDebugging) {
		enableDebugLogging()
	}
	else {
		debugOff ()
	}    
    
    
    logDebug ("Forced IP is $forceIP")
 	if (forceIP) {
        logDebug ("Setting IP Address to $forceIP")
        sendEvent(name: "ipAddress", value: "$forceIP")
        
    }
    else {
        logDebug ("Setting IP Address to $device.deviceNetworkId")
        sendEvent(name: "ipAddress", value: "$device.deviceNetworkId")
    }
    
    logDebug ("IP address set to ${device.currentValue"ipAddress"}")
     
    interfaces.mqtt.unsubscribe("stat/$state.deviceName/")
        

    
    //build command
    if (multiSwitch){
        state.powerCommand = "POWER${switchNumber}"
    }
    else {
        state.powerCommand = "POWER"
    }

    state.deviceName = device.displayName.replaceAll(' ','_') 
    logDebug ("Setting topic to $state.deviceName (taken from ${device.displayName})")  

    if (useMQTT){
        action ("Backlog%20topic%20${state.deviceName}%3Bmqtthost%20${mqttServer}%3Bhostname%20${state.deviceName}%3Bfriendlyname%20$state.deviceName%3Bdevicename%20$state.deviceName")
        logDebug ("MQTT enabled")
        MQTT_Initialise()
    }
    else{
        logDebug ("MQTT disabled")
        action ("Backlog%20topic%20${state.deviceName}%3Bhostname%20${state.deviceName}%3Bfriendlyname%20$state.deviceName%3Bdevicename%20$state.deviceName")
        interfaces.mqtt.disconnect()
        interfaces.mqtt.unsubscribe()
    }
    
    if ((!updateFrequency) || (updateFrequency=="0"))  {
        logDebug ("$device.displayName automatic HTTP updates disabled")
    }
    else if (updateFrequency == "1m")  {
        runEvery1Minute(refresh)
   	    logDebug ("$device.displayName updating every minute")
    }
    else if (updateFrequency == "5m")  {
        runEvery5Minutes(refresh)
 	    logDebug ("$device.displayName updating every 5 minutes")
    }
    else if (updateFrequency == "10m") {
        runEvery10Minutes(refresh)
 	    logDebug ("$device.displayName updating every 10 minutes")
    }   
    else if (updateFrequency == "30m") {
        runEvery30Minutes(refresh)
 	    logDebug ("$device.displayName updating every 30 minutes")
    }  
    else if (updateFrequency == "1h") {
        runEvery1Hour(refresh)
	    logDebug ("$device.displayName updating every 1 hour")
    }
    else if (updateFrequency == "3h") {
        runEvery3Hours(refresh)
	    logDebug ("$device.displayName updating every 3 hours")
    }
    
      
    
}	

def MQTT_Initialise(){
    
    logDebug ("MQTT_initialising")
    
    try { 
        interfaces.mqtt.connect("tcp://${mqttServer}:1883", state.deviceName, null, null)
        logDebug ("MQTT connected with Hostname: $state.deviceName")
        } 
    catch(Exception e) {
        logWarn ("Error when trying to connect to tcp://${mqttServer}:1883")
        logWarn ("$e")
    }
        
    
    
    
    //subscribe to POWER for switch status
    topic = "stat/$state.deviceName/" 

        
    logDebug ("Subscibing to ${topic}${state.powerCommand} for switch status")
    interfaces.mqtt.subscribe("${topic}${state.powerCommand}", 1)
    
    if (sonoffTH){
        logDebug ("Subscibing to ${topic}STATUS10 for TH")
        interfaces.mqtt.subscribe("${topic}STATUS10", 2)
    }
    if (sonoffPOW){
        logDebug ("Subscibing to ${topic}STATUS10 for POW")
        interfaces.mqtt.subscribe("${topic}STATUS10", 2)
    }
}  


def mqttClientStatus(message){
    if (message.contains ('Error')){
        logWarn (message)
    }
    else {
        logDebug ("Client status: $message")
    }
    
    //checking for connection lost (Error: Connection lost:)
    if (message.contains('Connection lost')){
        logDebug ("Calling MQTT_Initialise to re-establish connection")
        MQTT_Initialise()
    }
 
}

def parse(message){
    mqttMap = interfaces.mqtt.parseMessage(message)
    logDebug ("new MQTT message received: $mqttMap")
    payload = mqttMap["payload"]
    
    extractFromPayload (payload)
}

def extractFromPayload (payload){

    time = now()
    sendEvent(name: "lastEventTime", value: time)
    currentSwitch = device.currentValue("switch")
    logDebug ("parsing message, time:$time")
   
    if ((payload == "ON") || (payload == "OFF")){
        payload = payload.toLowerCase()
        if (currentSwitch != payload){
            sendEvent(name: "switch", value: payload)
            logInfo ("switched: ${payload} " ) 
        }
        else {
            logDebug ("Did not change state from $payload - no event sent")
        }
    }
    else {
       
        json = new groovy.json.JsonSlurper().parseText(payload)  
        logDebug ("JSON Message: $json")
        
       
        
        if (payload.contains('POWER')){
            logDebug ("POWER found")
            switchStatus = json.POWER
            if (switchStatus){
                switchStatus = switchStatus.toLowerCase()
                
                if (currentSwitch != switchStatus){
                    sendEvent(name: "switch", value: switchStatus)
                    logInfo ("switched: ${switchStatus} " ) 
                }
                else {
                    logDebug ("Did not change state from $switchStatus - no event sent")
                }
            }
            else{
                logDebug ("No valid POWER value found - not switched" ) 
            }
            
        }                
        if (payload.contains('WARNING')){
            logDebug ("Warning message receieved")
            logWarn (payload)
        }        
        
        //DS18B20 probe
        if (payload.contains('DS18B20')){
            logDebug ("DS18B20 temperature found")
            
            temperature = json.StatusSNS.DS18B20.Temperature
            unit = json.StatusSNS.TempUnit
            updateTemperature (temperature, unit)
        }
        //SI7021 probe
        if (payload.contains('SI7021')){
            logDebug ("SI7021 temperature found")
        
            temperature = json.StatusSNS.SI7021.Temperature
            unit = json.StatusSNS.TempUnit
            updateTemperature (temperature, unit)
            humidity = json.StatusSNS.SI7021.Humidity
            sendEvent(name: "humidity", value: humidity)
            logInfo ("Humidity: ${humidity}%")
        }
        //SONOFF POW
        if (payload.contains('ENERGY')){
            logDebug ("Energy data found")
            power = json.StatusSNS.ENERGY.Power
            apparentPower = json.StatusSNS.ENERGY.ApparentPower
            reactivePower = json.StatusSNS.ENERGY.ReactivePower
            powerFactor = json.StatusSNS.ENERGY.Factor
            voltage = json.StatusSNS.ENERGY.Voltage
            current = json.StatusSNS.ENERGY.Current
            energyTotal = json.StatusSNS.ENERGY.Total
        
        
            sendEvent(name: "voltage", value: voltage)
       		sendEvent(name: "power", value: power)
            sendEvent(name: "energy", value: energyTotal)
            sendEvent(name: "current", value: current)
            sendEvent(name: "reactivePower", value: reactivePower)
            sendEvent(name: "powerFactor", value: powerFactor)
            sendEvent(name: "apparentPower", value: apparentPower)
        
            logInfo("voltage:$voltage current:$current power:$power apparentPower:$apparentPower reactivePower:$reactivePower powerFactor:$powerFactor")
        }
    
         
        if (json.containsKey('SonoffIPAddress')){
            IPAddress = json.StatusNET.IPAddress
            sendEvent(name: "IPAddress", value: IPAddress)
        }
    
        if (json.containsKey('SonoffVersion')){
            tasmotaVersion = json.StatusFWR.Version
            sendEvent(name: "tasmotaVersion", value: tasmotaVersion)
        }
    }
}


def updateTemperature (temperatureRaw, unit){
    
    if (TOffset) {
        logDebug ("Adding offset of ${TOffset}C to reading of ${temperatureRaw}${unit}")
        temperature = (temperatureRaw as float) + TOffset
    }
    else {
        temperature = temperatureRaw as float
        logDebug ("No offset to reading of ${temperatureRaw}${unit}")    
    }
    
       
    if ((temperature as float) == (device.currentTemperature as float)){
        logDebug ("Temperature unchanged from ${device.currentTemperature}")
    }
    
    else {
        logDebug ("Temperature changed from ${device.currentTemperature} to $temperature")
        sendEvent(name: "temperature", value: temperature)
        logInfo ("Temperature: ${temperature}${unit}")
    }
    
    
    if (device.currentMaxTempToday == null){
        logDebug ("$device.displayName No max temp currently set")
        sendEvent (name: "maxTempToday", value: temperature)
		maxToday = temperature
    }	
	else{
        maxToday = device.currentValue("maxTempToday")
    }		
            
	if (device.currentMinTempToday == null){
        logDebug ("$device.displayName No min temp currently set")
        sendEvent (name: "minTempToday", value: temperature)
		minToday = temperature
    }	
	       
	else{
        minToday = device.currentValue("minTempToday")
    }		
    
    if (temperature > maxToday){
        logDebug ("$device.displayName updating max temperature from $maxToday to $temperature")
        sendEvent (name: "maxTempToday", value: temperature)
    }
	if (temperature < minToday){
        logDebug ("$device.displayName updating min temperature from $minToday to $temperature")
        sendEvent (name: "minTempToday", value: temperature)
    }
    
    //reset max and min on date change
    def df = new java.text.SimpleDateFormat("EEEE")
    df.setTimeZone(location.timeZone)
    def day = df.format(new Date()) 
	if (day != state.dayLast) {
        logDebug ("its is $day today last refresh was $state.dayLast, resetting max and min" )
    	resetMaxMin()
    }
    state.dayLast = day
	
}
        

def Update(evt){
	logDebug ("$device.displayName refreshing status via HTTP")
    action("status%200")
    }

   
def refresh() {
    
    logDebug ("$device.displayName $device.deviceNetworkId refreshing")
    
    if (useMQTT){
        mqttAction("POWER"," ")
        if (sonoffTH || sonoffPOW){
            mqttAction("STATUS","10")
        }
    }
    else{
	    Update()
    }
}

def push() {
	logDebug ("push command received, status: switch - ${device.currentValue("switch")}")
    if (disabled){
        logDebug ("device disabled")
    }
    else {
        if (useMQTT){
            mqttAction("${state.powerCommand}","toggle")
        }
        else {
            action ("${state.powerCommand}%20Toggle")
            runIn (5, Update)
        }
    }
}    
    
    

def on() {
	logDebug ("on command received, status: switch - ${device.currentValue("switch")}")
    if (disabled){
        logDebug ("device disabled")
    }
    else {
        switchCommand ('on')
    }
}

def off() {
	logDebug ("off command received, status: switch - ${device.currentValue("switch")}")
    if (disabled){
        logDebug ("device disabled")
    }
    else {
        switchCommand ('off')
    }
}

def switchCommand (command){
    //handler to opperate switch
    logDebug ("Switching $command")
    

    if (useMQTT){
        mqttAction("${state.powerCommand}",command)
        timeNow = now()
        runIn(2, 'checkSwitched', [data: [command, timeNow]])
       
    }
    else {
        action ("${state.powerCommand}%20$command")
        runIn (5, Update)
    }
}

def checkSwitched (command, commandTime){
    //Handler to check that the device has correctly responded to switch command
    
    //handler parameters
    timeout = 2000   // how long to wait for a reply before counting a failure
    maxFailures = 5  // How many retries allowed
    
    
    
    if (!state.failCount){state.failCount = 0}

    //Working out if response received in a timely manner
    
    timeOk = 0
    if (device.currentValue("lastEventTime")){
        timeLast = device.currentValue("lastEventTime") as long
            }
    else {
        logDebug ("No last event time recorded, setting to 0")
        timeLast = 0
    }
    timeToRespond = timeLast - commandTime
    logDebug ("command was sent at $commandTime, responce received at $timeLast taking ${timeToRespond}ms")
   
    if (timeToRespond < timeout){
        logDebug ("Response time ok")
        timeOk = 1
    }
    else {
        logWarn ("Response timed out")
        timeOk = 0
    }
    
    
    
    
    logDebug ("Checking device switched command:${command} switch:${device.currentSwitch}")
    
    if ((device.currentSwitch == command) && (timeOk == 1)){
        logDebug ("Correctly switched $command")
        state.failCount = 0
        sendEvent(name: "failure", value: 0)  
    }
    else {
        state.failCount += 1
        logWarn ("Did not switch $command : failcount:$state.failCount")
        if (state.failCount >= maxFailures){
            logError ("Failed to switch $state.failCount times")
            sendEvent(name: "failure", value: 1)  
            state.failCount = 0
            initialise () 
        }
        else {
            logDebug ("Re-Initialsing MQTT")
            MQTT_Initialise()
            switchCommand (command)
        }
        
    }
}
    


def resetMaxMin ()	{
	logDebug ("Resetting max and min to current temperature (${device.currentTemperature}")
    sendEvent (name: "minTempYesterday", value: device.currentTemperature)
    sendEvent (name: "maxTempYesterday", value: device.currentTemperature)
    sendEvent (name: "minTempToday", value: device.currentTemperature)
	sendEvent (name: "maxTempToday", value: device.currentTemperature)
}

def mqttAction(subTopic, command){
    
    connected = interfaces.mqtt.isConnected()
    if (!connected){
        logWarn ("MQTT Not connected, connecting...")
        interfaces.mqtt.connect("tcp://${mqttServer}:1883", state.deviceName, null, null)
        MQTT_Initialise()
        connected = interfaces.mqtt.isConnected()
    }
        
    if (connected){
        topic = "cmnd/${state.deviceName}/$subTopic"
        //command = "POWER OFF"
        logDebug ("Sending MQTT: ${topic} ${command}")
        // example command cmnd/sonoff_test/POWER on
        // working interfaces.mqtt.publish("cmnd/Stone_light/POWER", command, 1, true)
        interfaces.mqtt.publish(topic, command, 1, true)
    }
    else {
        
        log.error "$device.displayName : still not connecetd"
        MQTT_Initialise()
    }
    
}
//action - Sends command to Sonoff
//based on code found here https://community.smartthings.com/t/any-httpget-smatapps-or-code-anywhere/117945/4
def action(option){

	deviceIP = device.currentValue("ipAddress")
    logDebug ("Using IP address $deviceIP")

    //add password if not blank
    if (password){
			option += "&user=admin&password=${password}"
		}
    logDebug ("Sending http command : '${option}' to $device.displayName at IP:${deviceIP}")
    def theAction = new hubitat.device.HubAction("""GET /cm?cmnd=${option} HTTP/1.1\r\n Accept: */*\r\nHOST: ${deviceIP}:80\r\n\r\n""", hubitat.device.Protocol.LAN, "${deviceIP}:80", [callback: calledBackHandler])

    sendHubCommand(theAction)
}

void calledBackHandler(hubitat.device.HubResponse hubResponse)
{
 	//state.status = hubResponse.body 
    logDebug ("HTTP Received: ${hubResponse.body}")
    extractFromPayload (hubResponse.body)
  	
}
	


def enableDebugLogging (evt) {
	if (logDebugging){
		state.logDebug = 1
		logDebug ("Switching on debug logging")
	}
	if (debugDelay) {
		runIn (1800, debugOff)
	}
}				  

def logDebug (text) {
	if (state.logDebug){
		log.debug "$device.displayName : $text"
	}
}

def debugOff () {
	logDebug ("Switching off debug logging")
	state.logDebug = 0
}

def logInfo (text) {
	if (infoLog){
    	log.info "$device.displayName : $text"
    }
}
    
def logWarn (text) {
    logDebug ("Warning message received")
    log.warn "$device.displayName : $text"
}  

def logError (text) {
    log.error "$device.displayName : $text"
}  
